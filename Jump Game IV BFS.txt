class Solution {
public:
    int minJumps(vector<int>& arr) {
        map<int, vector<int>>sameValueIndex;
        int len = arr.size();
        queue<int>q;
        vector<int>cost;
        vector<bool>visited;
        
        for (int i = 0; i < len; i++){
            sameValueIndex[arr[i]].push_back(i);
            cost.push_back(-1);
            visited.push_back(false);
        }
        
        q.push(0);
        cost[0] = 0;
        visited[0] = true;
        while(!q.empty()){
            int curr = q.front();
            q.pop();
            
            if (curr == len -1) break;
            
            if(curr + 1 < len && !visited[curr + 1]){
                q.push(curr + 1);
                cost[curr + 1] = cost[curr] + 1;
                visited[curr + 1] = true;
            }

            if (curr - 1 >= 0 && !visited[curr - 1]){
                q.push(curr - 1);
                cost[curr - 1] = cost[curr] + 1;
                visited[curr -1] = true;
            }

            for (int i = 0; i < sameValueIndex[arr[curr]].size(); i++){
                if (!visited[sameValueIndex[arr[curr]][i]]){
                    q.push(sameValueIndex[arr[curr]][i]);
                    cost[sameValueIndex[arr[curr]][i]] = cost[curr] + 1;
                    visited[sameValueIndex[arr[curr]][i]] = true;
                }
            }
            
            sameValueIndex[arr[curr]].clear();
        }
        

        return cost[len -1];;
    
    }
};