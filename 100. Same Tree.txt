/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        vector<int> p_vec = bfs(p);
        vector<int> q_vec = bfs(q);

        if(p_vec.size() != q_vec.size()) return false;

        for(auto i = 0; i < p_vec.size(); i++){
            if(p_vec[i] != q_vec[i]) return false;
        }

        return true;
    }

    vector<int> bfs(TreeNode* root){
        queue<TreeNode*> q;
        vector<int>visiting_order;
        int sentinal_value = -10001;

         q.push(root);

         while(!q.empty()){
             auto top = q.front();
             q.pop();
            if(top == NULL){
                visiting_order.push_back(sentinal_value);
                continue;
            }
            visiting_order.push_back(top->val);
            q.push(top->left);
            q.push(top->right);
         }

        return visiting_order;   
    }
};