class Solution {
public:
    int longestSubsequence(string s, int k) {
        if(!isGreater(s, -1, k)){
            return s.length();
        }

        int ans = 0;
        int len = s.length();
        int start = 0;
        for(int i = 0; i < len; i++){
            if(!isGreater(s, i, k)){
                start = i;
                break;
            }

        }

        ans = zeroCounter(s, start) + (len - start - 1);

        return ans;
    }

    int zeroCounter(string s, int endIndex){
        int counter = 0;
        int i = 0;
        while(i != endIndex){
            if(s[i] == '0') counter++;
            i++;
        }

        return counter;
    }

    bool isGreater(string s, int startIndex, int k){
        long long int num = 0;
        int len = s.length();

        for (int i = len - 1; i > startIndex; i--){
            if(s[i] == '0') continue;
            if(num + pow(2, (len - i - 1)) > k) return true;
            
            num += pow(2, (len - i - 1));
        }

        return false;
    }
};